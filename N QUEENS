51:N QUEENS

import java.util.*;

class Solution {
    // Check if it's safe to place a queen at board[row][col]
    public  boolean isSafe(List<List<String>> board, int row, int col) {
        int n = board.size();
        
        // Column check
        for (int i = 0; i < n; i++) {
            if (board.get(i).get(col).equals("Q") && i != row) {
                return false;
            }
        }

        // Diagonal checks
        // Check row+col+ (bottom-right diagonal)
        for (int i = 1; i < n; i++) {
            if (row + i >= n || col + i >= n) break;
            if (board.get(row + i).get(col + i).equals("Q")) {
                return false;
            }
        }

        // Check row-col- (top-left diagonal)
        for (int i = 1; i < n; i++) {
            if (row - i < 0 || col - i < 0) break;
            if (board.get(row - i).get(col - i).equals("Q")) {
                return false;
            }
        }

        // Check row+col- (bottom-left diagonal)
        for (int i = 1; i < n; i++) {
            if (row + i >= n || col - i < 0) break;
            if (board.get(row + i).get(col - i).equals("Q")) {
                return false;
            }
        }

        // Check row-col+ (top-right diagonal)
        for (int i = 1; i < n; i++) {
            if (row - i < 0 || col + i >= n) break;
            if (board.get(row - i).get(col + i).equals("Q")) {
                return false;
            }
        }

        return true;
    }

    // Convert the current board state into a List of strings and add it to the result
    public  void addSolution(List<List<String>> board, List<List<String>> result) {
        List<String> currentSolution = new ArrayList<>();
        for (List<String> row : board) {
            currentSolution.add(String.join("", row));
        }
        result.add(currentSolution);
    }

    // Solve the N-Queens problem by placing queens row by row
    public  void solve(List<List<String>> board, int row, List<List<String>> result) {
        if (row >= board.size()) {
            addSolution(board, result); // Add the current valid configuration to the result list
            return;
        }

        for (int i = 0; i < board.size(); i++) {
            board.get(row).set(i, "Q");
            if (isSafe(board, row, i)) {
                solve(board, row + 1, result); // Recursively solve for the next row
            }
            board.get(row).set(i, "."); // Backtrack and remove the queen
        }
    }

    // Main method to initiate the N-Queens solver and return all solutions
    public  List<List<String>> solveNQueens(int n) {
        List<List<String>> board = new ArrayList<>();
        List<List<String>> result = new ArrayList<>();
        
        // Initialize the board with "."
        for (int i = 0; i < n; i++) {
            List<String> row = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                row.add(".");
            }
            board.add(row);
        }

        solve(board, 0, result); // Start solving from the 0th row
        return result; // Return all valid configurations
    }

}
